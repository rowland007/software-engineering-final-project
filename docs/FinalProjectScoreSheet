Final Project
CS221 Software Engineering

DIRECTIONS: Submit all files, source code and project files, necessary to rebuild and test your code.

Name:
Student Number:

For this project you will implement a solution for the Global Tech Industries problem in C++ (using another language requires the permission of your instructor, and permission must be obtained prior to submission).

The goal of this project is to both create a good solution and to employ as many sound practices learned in the course as possible.  You will choose a combination of program features and software engineering practices.

Scoring

Your project will be scored from 0 to 100. 

In your submission, you must include a Word document that lists which of the items below you wish to be graded on.  Each item is worth a maximum number of points.  An item that is partially completed may get partial credit.  For example, if you indicate you intend to be credited for your comments, but you left some functions undocumented, you could receive partial credit for that item.
Items that are indented with a (+) are dependent on a parent item and the number listed is in addition to the parent item number.

In your list, you may include items that total more than 100 if you wish.

Design

(5) Provide a module composition diagram.

(10) Provide essential use-case documentation for the major program capabilities.

(10) Provide a UML class diagram that includes all the classes in this project (you may want to do additional research on the Web to get all the representation information). 

(5) For a key module in your program, measure the cohesion; or, for a set of related modules, measure the coupling.

(10) Within the restrictions of a text-based system, provide an intuitive, easy-to-use interface.  Include in your Word document a short explanation of your design choices.

Implementation

(10) Classes include simple "test" methods that test all the other methods of the class and report any errors.

(+10) Same as above, but also research and integrate use of a testing framework like CppUnitLite.

(5) A naming model is adopted and employed for every programmer-named file.

(5) A reasonable comment style is specified and consistently followed.

Coding/Feature Inclusion

(15) System allows regular employees, secure employees, support employees, and clients to be entered into the system, retrieved individually by employee or client number, and displayed in bulk.

(15) Internally, employees and clients are objects; clients and employees inherit from an abstract base person class; specialized employees inherit from the base employee type.

(5) Employees and clients are stored in a structure without a built-in maximum size (e.g., a linked list and not an array).

(+5) Employees and clients are stored in a structure that facilitates fast execution of operations (e.g., a tree or hash table and not a plain linked list).  Note that you would presumably also be fulfilling the previous requirement; this 5 points is in addition to the other 5 points.

(10) System assigns employees to divisions and can list all employees in a particular division, and the division supervisor.

(5) User can designate and display employee's hiring level (e.g., provisional).

Testing

(5) Provide documentation of basic pass/fail testing for all modules.  Specific methodology is up to you, and can be done with or without including the unit testing technique.

(+5) Provide detailed testing for all modules; generate specific test cases and record output.

(10) Find a fellow programmer (not another student taking this course!) who will review your code and document the results.

Tracking

(5) Use the tracking spreadsheet you created in a previous assignment to track the amount of time you spend on this project, and compare this to your estimate.
